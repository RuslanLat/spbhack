import os
import pandas as pd
import psycopg2
from dotenv import load_dotenv

load_dotenv()

DB_USER = os.getenv('DB_USER')
DB_PASS = os.getenv('DB_PASS')
DB_HOST = os.getenv('DB_HOST')
DB_PORT = os.getenv('DB_PORT')
DB_NAME = os.getenv('DB_NAME')

connect = psycopg2.connect(database=DB_NAME,
                            user=DB_USER,
                            password=DB_PASS,
                            host=DB_HOST,
                            port=DB_PORT)
cursor = connect.cursor()

def load_data():
    building_20230808 = pd.read_csv("row_data/building_20230808.csv")
    return building_20230808

def drop_building():
    cursor.execute("DROP TABLE IF EXISTS building;")
    connect.commit()

def create_building():
    cursor.execute("""CREATE TABLE building( 
                row_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
                id INTEGER UNIQUE NOT NULL,
                full_address TEXT NOT NULL);""")
    connect.commit()

def insert_building(data):
    data = data.values

    cursor.executemany("""INSERT INTO building( 
                        id, full_address) 
                        VALUES (%s, %s);""", data)
    connect.commit()


def drop_train_building():
    cursor.execute("DROP TABLE IF EXISTS train_building;")
    connect.commit()


def create_train_building():
    cursor.execute("""CREATE TABLE train_building( 
                row_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
                full_address TEXT UNIQUE NOT NULL);""")
    connect.commit()


def insert_train_building(data):
    data = data.set_index('id').drop_duplicates().values
    cursor.executemany("""INSERT INTO train_building( 
                        full_address) 
                        VALUES (%s);""", data)
    connect.commit()

def drop_query_addrese():
    cursor.execute("DROP TABLE IF EXISTS query_addrese;")
    connect.commit()

def create_query_addrese():
    cursor.execute("""CREATE TABLE query_addrese( 
                row_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
                query_addrese TEXT UNIQUE NOT NULL,
                count INTEGER);""")
    connect.commit()


def drop_predict_addrese():
    cursor.execute("DROP TABLE IF EXISTS predict_addrese;")
    connect.commit()


def create_predict_addrese():
    cursor.execute("""CREATE TABLE predict_addrese( 
                row_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
                predict_addrese TEXT UNIQUE NOT NULL,
                count INTEGER);""")
    connect.commit()


def main():
    
    data = load_data()

    drop_building()
    create_building()
    insert_building(data)

    drop_train_building()
    create_train_building()
    insert_train_building(data)

    drop_predict_addrese()
    create_query_addrese()

    drop_predict_addrese()
    create_predict_addrese()

    connect.close()

if __name__ == "__main__":
    main()
   